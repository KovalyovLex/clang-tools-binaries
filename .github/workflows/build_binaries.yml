name: Build binaries

on:
  workflow_call:
    inputs:
      version-to-build:
        required: true
        type: string

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ linux, macosx, windows ]
        include:
          - os: linux
            runner: ubuntu-latest
            os-cmake-args: '-DLLVM_BUILD_STATIC=ON -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc -DLLVM_PARALLEL_LINK_JOBS=2 ${POSIX_CMAKE_ARGS}'
            build-args: '--parallel 4'
            extension: ''
            bindir: 'bin'
            shacmd: 'sha512sum'
          - os: macosx
            runner: macos-latest
            os-cmake-args: '-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DLLVM_PARALLEL_LINK_JOBS=2 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 ${POSIX_CMAKE_ARGS}'
            build-args: '--parallel 4'
            extension: ''
            bindir: 'bin'
            shacmd: 'shasum -a512'
          - os: windows
            runner: windows-latest
            os-cmake-args: '-DLLVM_BUILD_STATIC=ON -Thost=x64 -DCMAKE_CXX_FLAGS="/MP" -DLLVM_USE_CRT_RELEASE="MT"'
            build-args: '--config Release --parallel'
            extension: '.exe'
            bindir: 'Release/bin'
            shacmd: 'sha512sum.exe'
    runs-on: ${{ matrix.runner }}
    env:
      COMMON_CMAKE_ARGS: '-DBUILD_SHARED_LIBS=OFF -DLLVM_ENABLE_ZSTD=OFF -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra"'
      POSIX_CMAKE_ARGS: '-DCMAKE_BUILD_TYPE=Release'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout LLVM repo
      run: |
          git clone -b "llvmorg-${{ inputs.version-to-build }}" --depth=1 https://github.com/llvm/llvm-project "llvm"

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build"  | sed 's|\\|\/|g' >> "$GITHUB_OUTPUT"
        echo "artifacts-dir=${{ github.workspace }}/artifacts" | sed 's|\\|\/|g' >> "$GITHUB_OUTPUT"
        echo "bin-dir=${{ github.workspace }}/build/${{ matrix.bindir }}" | sed 's|\\|\/|g' >> "$GITHUB_OUTPUT"
    
    - name: Create artifacts dir
      shell: bash
      run: |
        mkdir ${{ steps.strings.outputs.artifacts-dir }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      run: >
        cmake -S ${{ github.workspace }}/llvm/llvm -B ${{ steps.strings.outputs.build-output-dir }}
        ${{ env.COMMON_CMAKE_ARGS }}
        ${{ matrix.os-cmake-args }}
    
    - name: Build (clang-format)
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} ${{ matrix.build-args }} --target clang-format
    
    - name: Build (clang-tidy)
      if: false
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} ${{ matrix.build-args }} --target clang-tidy

    - name: Copy binaries
      working-directory: ${{ steps.strings.outputs.bin-dir }}
      shell: bash
      run: |
        cp ./clang-format${{ matrix.extension }} ${{ steps.strings.outputs.artifacts-dir }}
        # cp ./clang-tidy${{ matrix.extension }} ${{ steps.strings.outputs.artifacts-dir }}

    - name: Create and print sha512sum (clang-format)
      working-directory: ${{ steps.strings.outputs.artifacts-dir }}
      shell: bash
      run: |
        ${{ matrix.shacmd }} clang-format${{ matrix.extension }} > clang-format${{ matrix.extension }}.sha512sum
        echo "Checksum: "
        cat clang-format${{ matrix.extension }}.sha512sum
    
    - name: Create and print sha512sum (clang-tidy)
      if: false
      working-directory: ${{ steps.strings.outputs.artifacts-dir }}
      shell: bash
      run: |
        ${{ matrix.shacmd }} clang-tidy${{ matrix.extension }} > clang-tidy${{ matrix.extension }}.sha512sum
        echo "Checksum: "
        cat clang-tidy${{ matrix.extension }}.sha512sum
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}
        path: "${{ steps.strings.outputs.artifacts-dir }}/"
        retention-days: 1
        
  draft-release:
    runs-on: ubuntu-latest
    needs: build
    if: |
      always() && 
      needs.build.result == 'success'
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: 'false'

      - name: List files
        run: ls -laR .
      
      - name: Zip artifacts
        shell: bash  
        run: |
          # iterate through folders for each platform
          for d in */ ; do
              dirname="${d%"${d##*[!/]}"}" # extglob-free multi-trailing-/ trim
              dirname="${dirname##*/}"     # remove everything before the last /
              dirname=${dirname:-/}        # correct for dirname=/ case
          
              # iterate through files and make archieve for every file in folder
              for f in $d* ; do
                  full_filename="${f%"${f##*[!/]}"}"   # extglob-free multi-trailing-/ trim
                  full_filename="${full_filename##*/}" # remove everything before the last /
                  full_filename=${full_filename:-/}    # correct for dirname=/ case
                  extension="${full_filename##*.}"     # Extract extension
                  
                  # Check if the file has an extension
                  if [ "$extension" != "$full_filename" ]; then
                      filename="${full_filename%.*}"
                      new_file_name="${filename}-${dirname}.${extension}"
                  else
                      new_file_name="${full_filename}-${dirname}"
                  fi
          
                  zip -m $new_file_name.zip ./$f
              done
              rm -rf $d # remove folder
          done
      
      - name: List files after zip
        run: ls -laR .

      - name: Make draft release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.zip"
          default_release_name: ${{ inputs.version-to-build }}
          draft: false
          overwrite: true

        