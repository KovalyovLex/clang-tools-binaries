name: Check new releases

on:
  push:
    branches: [ "main" ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: My last release
        id: last_release
        uses: InsonusK/get-latest-release@v1.1.0
        with:
          myToken: ${{ github.token }}
          exclude_types: "draft|prerelease"
          view_top: 10

      - name: "Print result"
        run: |
          echo "id: ${{ steps.last_release.outputs.id }}"
          echo "name: ${{ steps.last_release.outputs.name }}"
          echo "tag_name: ${{ steps.last_release.outputs.tag_name }}"

      - name: Check LLVM versions
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            let latest_version='${{ steps.last_release.outputs.name }}'.trim();
            if (latest_version === '') {
              latest_version = '18.1.0';
            }

            // Function to compare two version strings
            function compareVersions(a, b) {
              const partsA = a.split('.');
              const partsB = b.split('.');
              const maxLength = Math.max(partsA.length, partsB.length);

              for (let i = 0; i < maxLength; i++) {
                const numA = parseInt(partsA[i]) || 0;
                const numB = parseInt(partsB[i]) || 0;
                if (numA !== numB) {
                  return numA - numB;
                }
              }
              return 0;
            }

            let versions_to_trigger = [];

            const options = {};
            options.listeners = {
              stdout: (data) => {
                // Split the output into an array of lines
                const lines = data.toString().split('\n');
              
                console.log(`lines: ${lines}`);

                for(const line in lines) {
                  // Split the line into oid and ref
                  const [oid, ref] = line.split('\t');

                  console.log(`oid: ${oid}, ref: ${ref}, line: ${line}`);

                  if (!oid || !ref) {
                    continue;
                  }

                  // Remove prefix from ref
                  const version = ref.replace('refs/tags/llvmorg-', '');
              
                  // Check if version consists only of numbers and dots
                  if (/^[0-9.]+$/.test(version)) {
                    // Compare versions
                    if (compareVersions(version, latest_version) > 0) {
                      console.log(version + " is greater, need to build binaries");

                      versions_to_trigger.push(version)
                    }
                  }
                }
              },
              stderr: (data) => {
                console.error(`stderr: ${data.toString()}`);
              }
            };

            await exec.exec('git', ['ls-remote', '--tags', '--refs', '--sort=-version:refname', 'https://github.com/llvm/llvm-project', 'llvmorg-*'], options);

            for(const version in versions_to_trigger) {
              await github.rest.actions.createWorkflowDispatch({
                owner: 'KovalyovLex',
                repo: 'clang-tools-binaries',
                workflow_id: 'build_binaries.yaml',
                version_to_build: version
              });
            }


        